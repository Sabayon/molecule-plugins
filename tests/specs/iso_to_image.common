# Define an alternative execution strategy, in this case, the value must be
execution_strategy: iso_to_image

# Error script command, executed when something went wrong and molecule has
# to terminate the execution
error_script: specs/data/error_script.sh

# Outer chroot script command, to be executed outside destination chroot before
# before entering it (and before inner_chroot_script)
outer_chroot_script: specs/data/outer_chroot_script.sh

# Inner chroot script command, to be executed inside destination chroot before
# packing it
inner_chroot_script: specs/data/inner_chroot_script.sh

# Inner chroot script command, to be executed inside destination chroot after
# packages installation and removal
inner_chroot_script_after: specs/data/inner_chroot_script_after.sh

# Outer chroot script command, to be executed outside destination chroot before
# before entering it (and AFTER inner_chroot_script)
outer_chroot_script_after: specs/data/outer_chroot_script_after.sh

# Pre-image building script. Hook called before image file creation
# Variables exported:
# TMP_IMAGE_PATH = path pointing to the temporary destination image file
# LOOP_DEVICE = loop device (/dev/loopN) currently in use
pre_image_script: specs/data/pre_image_script.sh

# Post-image building script. Hook called after image file creation and move
# into destination directory.
# Variables exported:
# IMAGE_PATH = path pointing to the destination image file
# IMAGE_CHECKSUM_PATH = path pointing to the destination image file checksum (md5)
post_image_script: specs/data/post_image_script.sh

# Destination directory for the image path (MANDATORY)
destination_image_directory: /

# Specify an alternative image file name (image file name will be automatically
# produced otherwise)
image_name: image_name_w00t

# Specify the image file size in Megabytes. This is mandatory.
# To avoid runtime failure, make sure the image is large enough to fit your
# chroot data.
# Example: 5000 (means: ~5GB)
# Example: 15000 (means: ~15GB)
image_mb: 5000

# Either set this to "yes" or "no" if you want your image to be filled with
# random data instead of zeroes. urandom is used, fallback is: random.
# Default is: no
image_randomize: yes

# Specify an image filesystem formatter that takes a single argument , which is
# the image device (by design, a loop device is passed to this executable).
# Default is: mkfs.ext3
image_formatter: mkfs.ext2

# Specify an image file mount command. Two arguments are passed: (1) a loop
# device (/dev/loopN), (2) a temporary destination directory.
# Default is: mount -o loop,rw
image_mounter: mount -o rw,loop

# Specify am image file unmount command. One arguments is passed: mount point.
# Default is: umount
image_umounter: umount -l

# Alternative ISO file mount command (default is: mount -o loop -t iso9660)
iso_mounter: mount -t iso9660 -o loop

# Alternative ISO umounter command (default is: umount)
iso_umounter: umount -l

# Alternative squashfs file mount command (default is: mount -o loop -t squashfs)
squash_mounter: mount -t squashfs -o loop

# Alternative ISO squashfs umount command (default is: umount)
squash_umounter:

# List of packages that would be removed from chrooted system (comma separated)
packages_to_remove: app-remove/this, app-remove/that

# Custom shell call to packages removal (default is: equo remove)
custom_packages_remove_cmd: equo remove --debug

# List of packages that would be added from chrooted system (comma separated)
packages_to_add: app-add/this, app-add/that

# Custom shell call to packages add (default is: equo install)
custom_packages_add_cmd: equo install --debug

# Custom command for updating repositories (default is: equo update)
repositories_update_cmd: equo update --debug

# Determine whether repositories update should be run (if packages_to_add is set)
# (default is: no), values are: yes, no.
execute_repositories_update: yes

# Directories to remove completely (comma separated)
paths_to_remove: /remove/this, /and/that

# Directories to empty (comma separated)
paths_to_empty: /empty/this, and/that
